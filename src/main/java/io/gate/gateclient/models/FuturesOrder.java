/*
 * Gate API v4
 * APIv4 futures provides all sorts of futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateclient.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * FuturesOrder
 */

public class FuturesOrder {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_CREATE_TIME = "create_time";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private BigDecimal createTime;

  public static final String SERIALIZED_NAME_FINISH_TIME = "finish_time";
  @SerializedName(SERIALIZED_NAME_FINISH_TIME)
  private BigDecimal finishTime;

  /**
   * how the order is finished.  - filled: all filled - cancelled: manually cancelled - liquidated: cancelled because of liquidation - ioc: time in force is &#x60;IOC&#x60;, finish immediately - auto_deleveraged: finished by ADL 
   */
  @JsonAdapter(FinishAsEnum.Adapter.class)
  public enum FinishAsEnum {
    FILLED("filled"),
    
    CANCELLED("cancelled"),
    
    LIQUIDATED("liquidated"),
    
    IOC("ioc"),
    
    AUTO_DELEVERAGED("auto_deleveraged");

    private String value;

    FinishAsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FinishAsEnum fromValue(String text) {
      for (FinishAsEnum b : FinishAsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<FinishAsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FinishAsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FinishAsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FinishAsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_FINISH_AS = "finish_as";
  @SerializedName(SERIALIZED_NAME_FINISH_AS)
  private FinishAsEnum finishAs;

  /**
   * order status  - &#x60;open&#x60;: waiting to be traded - &#x60;finished&#x60;: finished 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OPEN("open"),
    
    FINISHED("finished");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CONTRACT = "contract";
  @SerializedName(SERIALIZED_NAME_CONTRACT)
  private String contract;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_CLOSE = "close";
  @SerializedName(SERIALIZED_NAME_CLOSE)
  private Boolean close = false;

  public static final String SERIALIZED_NAME_IS_CLOSE = "is_close";
  @SerializedName(SERIALIZED_NAME_IS_CLOSE)
  private Boolean isClose;

  /**
   * Time in force. If using market price, only &#x60;ioc&#x60; is supported.  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled 
   */
  @JsonAdapter(TifEnum.Adapter.class)
  public enum TifEnum {
    GTC("gtc"),
    
    IOC("ioc");

    private String value;

    TifEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TifEnum fromValue(String text) {
      for (TifEnum b : TifEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<TifEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TifEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TifEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TifEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TIF = "tif";
  @SerializedName(SERIALIZED_NAME_TIF)
  private TifEnum tif = TifEnum.GTC;

  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private Long left;

  public static final String SERIALIZED_NAME_FILL_PRICE = "fill_price";
  @SerializedName(SERIALIZED_NAME_FILL_PRICE)
  private String fillPrice;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

   /**
   * futures order ID
   * @return id
  **/
  @ApiModelProperty(value = "futures order ID")
  public Long getId() {
    return id;
  }

   /**
   * order creation time
   * @return createTime
  **/
  @ApiModelProperty(value = "order creation time")
  @JsonSerialize(using = ToStringSerializer.class)
  public BigDecimal getCreateTime() {
    return createTime;
  }

   /**
   * order finished time. Not returned if order is open
   * @return finishTime
  **/
  @ApiModelProperty(value = "order finished time. Not returned if order is open")
  @JsonSerialize(using = ToStringSerializer.class)
  public BigDecimal getFinishTime() {
    return finishTime;
  }

   /**
   * how the order is finished.  - filled: all filled - cancelled: manually cancelled - liquidated: cancelled because of liquidation - ioc: time in force is &#x60;IOC&#x60;, finish immediately - auto_deleveraged: finished by ADL 
   * @return finishAs
  **/
  @ApiModelProperty(value = "how the order is finished.  - filled: all filled - cancelled: manually cancelled - liquidated: cancelled because of liquidation - ioc: time in force is `IOC`, finish immediately - auto_deleveraged: finished by ADL ")
  public FinishAsEnum getFinishAs() {
    return finishAs;
  }

   /**
   * order status  - &#x60;open&#x60;: waiting to be traded - &#x60;finished&#x60;: finished 
   * @return status
  **/
  @ApiModelProperty(value = "order status  - `open`: waiting to be traded - `finished`: finished ")
  public StatusEnum getStatus() {
    return status;
  }

  public FuturesOrder contract(String contract) {
    this.contract = contract;
    return this;
  }

   /**
   * contract name
   * @return contract
  **/
  @ApiModelProperty(required = true, value = "contract name")
  public String getContract() {
    return contract;
  }

  public void setContract(String contract) {
    this.contract = contract;
  }

  public FuturesOrder size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * contract size. Specify positive number to make a bid, negative number otherwise.  Set to 0 if trying to close the position 
   * @return size
  **/
  @ApiModelProperty(value = "contract size. Specify positive number to make a bid, negative number otherwise.  Set to 0 if trying to close the position ")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public FuturesOrder price(String price) {
    this.price = price;
    return this;
  }

   /**
   * order price. Set to 0 if using market price
   * @return price
  **/
  @ApiModelProperty(value = "order price. Set to 0 if using market price")
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }

  public FuturesOrder close(Boolean close) {
    this.close = close;
    return this;
  }

   /**
   * set to true if trying to close the position
   * @return close
  **/
  @ApiModelProperty(value = "set to true if trying to close the position")
  public Boolean getClose() {
    return close;
  }

  public void setClose(Boolean close) {
    this.close = close;
  }

   /**
   * the order is a closing position order.
   * @return isClose
  **/
  @ApiModelProperty(value = "the order is a closing position order.")
  public Boolean getIsClose() {
    return isClose;
  }

  public FuturesOrder tif(TifEnum tif) {
    this.tif = tif;
    return this;
  }

   /**
   * Time in force. If using market price, only &#x60;ioc&#x60; is supported.  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled 
   * @return tif
  **/
  @ApiModelProperty(value = "Time in force. If using market price, only `ioc` is supported.  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled ")
  public TifEnum getTif() {
    return tif;
  }

  public void setTif(TifEnum tif) {
    this.tif = tif;
  }

   /**
   * size left to be traded
   * @return left
  **/
  @ApiModelProperty(value = "size left to be traded")
  public Long getLeft() {
    return left;
  }

   /**
   * fill price of the order
   * @return fillPrice
  **/
  @ApiModelProperty(value = "fill price of the order")
  public String getFillPrice() {
    return fillPrice;
  }

  public FuturesOrder text(String text) {
    this.text = text;
    return this;
  }

   /**
   * how order is created  - web: from web - api: from API - app: from mobile phones - auto_deleveraging: from ADL - liquidation: from liquidation - insurance: from insurance 
   * @return text
  **/
  @ApiModelProperty(value = "how order is created  - web: from web - api: from API - app: from mobile phones - auto_deleveraging: from ADL - liquidation: from liquidation - insurance: from insurance ")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FuturesOrder futuresOrder = (FuturesOrder) o;
    return Objects.equals(this.id, futuresOrder.id) &&
        Objects.equals(this.createTime, futuresOrder.createTime) &&
        Objects.equals(this.finishTime, futuresOrder.finishTime) &&
        Objects.equals(this.finishAs, futuresOrder.finishAs) &&
        Objects.equals(this.status, futuresOrder.status) &&
        Objects.equals(this.contract, futuresOrder.contract) &&
        Objects.equals(this.size, futuresOrder.size) &&
        Objects.equals(this.price, futuresOrder.price) &&
        Objects.equals(this.close, futuresOrder.close) &&
        Objects.equals(this.isClose, futuresOrder.isClose) &&
        Objects.equals(this.tif, futuresOrder.tif) &&
        Objects.equals(this.left, futuresOrder.left) &&
        Objects.equals(this.fillPrice, futuresOrder.fillPrice) &&
        Objects.equals(this.text, futuresOrder.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createTime, finishTime, finishAs, status, contract, size, price, close, isClose, tif, left, fillPrice, text);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FuturesOrder {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    finishAs: ").append(toIndentedString(finishAs)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    close: ").append(toIndentedString(close)).append("\n");
    sb.append("    isClose: ").append(toIndentedString(isClose)).append("\n");
    sb.append("    tif: ").append(toIndentedString(tif)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    fillPrice: ").append(toIndentedString(fillPrice)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

